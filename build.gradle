plugins {
    id 'fabric-loom' version '1.5-SNAPSHOT'
    id 'maven-publish'
    id "me.modmuss50.mod-publish-plugin" version "0.4.0"
    id 'com.diffplug.spotless' version "7.0.0.BETA3"
}


import groovy.json.JsonOutput
import groovy.json.JsonSlurper

base {
    archivesName = project.modName
}
version = project.modVersion
group = project.mavenGroup

repositories {
    maven { url "https://cfa2.cursemaven.com" }
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com" }
    maven { url "https://libs.azuredoom.com:4443/mods" }
    maven { url "https://dl.cloudsmith.io/public/tslat/sbl/maven/" }
    maven { url "https://maven.blamejared.com" }
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "https://maven.gegy.dev" }
    maven { url "https://maven.enginehub.org/repo/" }
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "https://api.modrinth.com/maven" }
    maven { url "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/" }
    maven { url "https://maven.parchmentmc.org" }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraftVersion}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-1.20.1:2023.09.03@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${project.loaderVersion}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabricVersion}"
    modImplementation "mod.azure.azurelib:azurelib-fabric-${project.minecraftVersion}:${project.azurelibVersion}"
    modImplementation "com.terraformersmc:modmenu:${project.modmenuVersion}"
    modImplementation "net.tslat.smartbrainlib:SmartBrainLib-fabric-${project.minecraftVersion}:${project.sblVersion}"
    modImplementation "net.tslat.smartbrainlib:SmartBrainLib-common-${project.minecraftVersion}:${project.sblVersion}"
    modImplementation "software.bernie.geckolib:geckolib-fabric-${project.minecraftVersion}:${project.geckolibVersion}"
    include(modImplementation "mod.azure.bettercrawling:better-crawling-fabric-${project.minecraftVersion}:${project.bettercrawlingVersion}")
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

processResources {
    doLast {
        def jsonMinifyStart = System.currentTimeMillis()
        def jsonMinified = 0
        def jsonBytesSaved = 0
        fileTree(dir: outputs.files.asPath, include: '**/*.json').each {
            File file = it
            jsonMinified++
            def oldLength = file.length()
            file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
            jsonBytesSaved += oldLength - file.length()
        }
        println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
    }
}

loom {
    accessWidenerPath = file("src/main/resources/gigeresque.accesswidener")
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

spotless {
    java {
        eclipse().configFile("$rootDir/eclipse-formatter.xml")
        endWithNewline()
        importOrder("", "java", group.toString(), "\\#")
        indentWithSpaces(4)
        removeUnusedImports()
        trimTrailingWhitespace()
    }
}

tasks.build {
    dependsOn("spotlessApply")
}

if (file('key.properties').exists()) {
    publishMods {
        def releaseProp = new Properties()
        File secretPropsFile = file("key.properties")
        releaseProp.load(secretPropsFile.newInputStream())
        file = remapJar.archiveFile
        displayName = project.modVersion
        changelog = rootProject.file("changelog.md").text
        type = STABLE

        def cfoptions = curseforgeOptions {
            accessToken = releaseProp.getProperty("curseKey")
            minecraftVersions.add("1.20.1")
            projectId = project.curseforgeID
            projectSlug = "gigeresque" // Required for discord webhook
        }
        def mroptions = modrinthOptions {
            projectId = project.modrinthID
            accessToken = releaseProp.getProperty("modrinthKey")
            minecraftVersions.add("1.20.1")
        }
        curseforge("curseforgeFabric") {
            from cfoptions
            modLoaders.add("fabric")
            modLoaders.add("quilt")

            requires {
                slug = "fabric-api"
            }
            requires {
                slug = "azurelib"
            }
            requires {
                slug = "smartbrainlib"
            }
            optional {
                slug = "modmenu"
            }
            optional {
                slug = "dripsounds-fabric"
            }
            optional {
                slug = "sound-physics-remastered"
            }
            optional {
                slug = "ad-astra"
            }
            optional {
                slug = "aftershock"
            }
            optional {
                slug = "arachnids"
            }
            optional {
                slug = "happiness-is-a-warm-gun"
            }
            optional {
                slug = "jar-jar-binks"
            }
            optional {
                slug = "living-things"
            }
            optional {
                slug = "caracal-mod"
            }
            optional {
                slug = "illager-invasion"
            }
            optional {
                slug = "minecraft-comes-alive-mca"
            }
            optional {
                slug = "promenade"
            }
            optional {
                slug = "friends-and-foes"
            }
            optional {
                slug = "the-graveyard-fabric"
            }
            optional {
                slug = "betterend"
            }
        }
        modrinth("modrinthFabric") {
            from mroptions
            modLoaders.add("fabric")
            modLoaders.add("quilt")

            requires {
                slug = "fabric-api"
            }
            requires {
                slug = "azurelib"
            }
            requires {
                slug = "smartbrainlib"
            }
            optional {
                slug = "modmenu"
            }
            optional {
                slug = "dripsounds-fabric"
            }
            optional {
                slug = "sound-physics-remastered"
            }
            optional {
                slug = "ad-astra"
            }
            optional {
                slug = "aftershock"
            }
            optional {
                slug = "arachnids"
            }
            optional {
                slug = "happiness-is-a-warm-gun"
            }
            optional {
                slug = "jar-jar-binks"
            }
            optional {
                slug = "living-things"
            }
            optional {
                slug = "betterend"
            }
            optional {
                slug = "caracal_mob"
            }
            optional {
                slug = "illager-invasion"
            }
            optional {
                slug = "minecraft-comes-alive-reborn"
            }
            optional {
                slug = "promenade"
            }
            optional {
                slug = "the-graveyard-fabric"
            }
            optional {
                slug = "cave-dweller-fabric"
            }
            optional {
                slug = "friends-and-foes"
            }
        }
    }
}